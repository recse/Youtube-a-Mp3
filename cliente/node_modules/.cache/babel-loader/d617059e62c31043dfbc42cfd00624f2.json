{"ast":null,"code":"import{formatMuiErrorMessage as _formatMuiErrorMessage}from\"@material-ui/utils\";/* eslint-disable no-use-before-define */ /**\n * Returns a number whose value is limited to the given range.\n *\n * @param {number} value The value to be clamped\n * @param {number} min The lower boundary of the output range\n * @param {number} max The upper boundary of the output range\n * @returns {number} A number in the range [min, max]\n */function clamp(value){var min=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;var max=arguments.length>2&&arguments[2]!==undefined?arguments[2]:1;if(process.env.NODE_ENV!=='production'){if(value<min||value>max){console.error(\"Material-UI: The value provided \".concat(value,\" is out of range [\").concat(min,\", \").concat(max,\"].\"));}}return Math.min(Math.max(min,value),max);}/**\n * Converts a color from CSS hex format to CSS rgb format.\n *\n * @param {string} color - Hex color, i.e. #nnn or #nnnnnn\n * @returns {string} A CSS rgb color string\n */export function hexToRgb(color){color=color.substr(1);var re=new RegExp(\".{1,\".concat(color.length>=6?2:1,\"}\"),'g');var colors=color.match(re);if(colors&&colors[0].length===1){colors=colors.map(function(n){return n+n;});}return colors?\"rgb\".concat(colors.length===4?'a':'',\"(\").concat(colors.map(function(n,index){return index<3?parseInt(n,16):Math.round(parseInt(n,16)/255*1000)/1000;}).join(', '),\")\"):'';}function intToHex(int){var hex=int.toString(16);return hex.length===1?\"0\".concat(hex):hex;}/**\n * Converts a color from CSS rgb format to CSS hex format.\n *\n * @param {string} color - RGB color, i.e. rgb(n, n, n)\n * @returns {string} A CSS rgb color string, i.e. #nnnnnn\n */export function rgbToHex(color){// Idempotent\nif(color.indexOf('#')===0){return color;}var _decomposeColor=decomposeColor(color),values=_decomposeColor.values;return\"#\".concat(values.map(function(n){return intToHex(n);}).join(''));}/**\n * Converts a color from hsl format to rgb format.\n *\n * @param {string} color - HSL color values\n * @returns {string} rgb color values\n */export function hslToRgb(color){color=decomposeColor(color);var _color=color,values=_color.values;var h=values[0];var s=values[1]/100;var l=values[2]/100;var a=s*Math.min(l,1-l);var f=function f(n){var k=arguments.length>1&&arguments[1]!==undefined?arguments[1]:(n+h/30)%12;return l-a*Math.max(Math.min(k-3,9-k,1),-1);};var type='rgb';var rgb=[Math.round(f(0)*255),Math.round(f(8)*255),Math.round(f(4)*255)];if(color.type==='hsla'){type+='a';rgb.push(values[3]);}return recomposeColor({type:type,values:rgb});}/**\n * Returns an object with the type and values of a color.\n *\n * Note: Does not support rgb % values.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @returns {object} - A MUI color object: {type: string, values: number[]}\n */export function decomposeColor(color){// Idempotent\nif(color.type){return color;}if(color.charAt(0)==='#'){return decomposeColor(hexToRgb(color));}var marker=color.indexOf('(');var type=color.substring(0,marker);if(['rgb','rgba','hsl','hsla'].indexOf(type)===-1){throw new Error(process.env.NODE_ENV!==\"production\"?\"Material-UI: Unsupported `\".concat(color,\"` color.\\nWe support the following formats: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla().\"):_formatMuiErrorMessage(3,color));}var values=color.substring(marker+1,color.length-1).split(',');values=values.map(function(value){return parseFloat(value);});return{type:type,values:values};}/**\n * Converts a color object with type and values to a string.\n *\n * @param {object} color - Decomposed color\n * @param {string} color.type - One of: 'rgb', 'rgba', 'hsl', 'hsla'\n * @param {array} color.values - [n,n,n] or [n,n,n,n]\n * @returns {string} A CSS color string\n */export function recomposeColor(color){var type=color.type;var values=color.values;if(type.indexOf('rgb')!==-1){// Only convert the first 3 values to int (i.e. not alpha)\nvalues=values.map(function(n,i){return i<3?parseInt(n,10):n;});}else if(type.indexOf('hsl')!==-1){values[1]=\"\".concat(values[1],\"%\");values[2]=\"\".concat(values[2],\"%\");}return\"\".concat(type,\"(\").concat(values.join(', '),\")\");}/**\n * Calculates the contrast ratio between two colors.\n *\n * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\n *\n * @param {string} foreground - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {string} background - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @returns {number} A contrast ratio value in the range 0 - 21.\n */export function getContrastRatio(foreground,background){var lumA=getLuminance(foreground);var lumB=getLuminance(background);return(Math.max(lumA,lumB)+0.05)/(Math.min(lumA,lumB)+0.05);}/**\n * The relative brightness of any point in a color space,\n * normalized to 0 for darkest black and 1 for lightest white.\n *\n * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @returns {number} The relative brightness of the color in the range 0 - 1\n */export function getLuminance(color){color=decomposeColor(color);var rgb=color.type==='hsl'?decomposeColor(hslToRgb(color)).values:color.values;rgb=rgb.map(function(val){val/=255;// normalized\nreturn val<=0.03928?val/12.92:Math.pow((val+0.055)/1.055,2.4);});// Truncate at 3 digits\nreturn Number((0.2126*rgb[0]+0.7152*rgb[1]+0.0722*rgb[2]).toFixed(3));}/**\n * Darken or lighten a color, depending on its luminance.\n * Light colors are darkened, dark colors are lightened.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {number} coefficient=0.15 - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */export function emphasize(color){var coefficient=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0.15;return getLuminance(color)>0.5?darken(color,coefficient):lighten(color,coefficient);}/**\n * Set the absolute transparency of a color.\n * Any existing alpha values are overwritten.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {number} value - value to set the alpha channel to in the range 0 -1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */export function fade(color,value){color=decomposeColor(color);value=clamp(value);if(color.type==='rgb'||color.type==='hsl'){color.type+='a';}color.values[3]=value;return recomposeColor(color);}/**\n * Darkens a color.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {number} coefficient - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */export function darken(color,coefficient){color=decomposeColor(color);coefficient=clamp(coefficient);if(color.type.indexOf('hsl')!==-1){color.values[2]*=1-coefficient;}else if(color.type.indexOf('rgb')!==-1){for(var i=0;i<3;i+=1){color.values[i]*=1-coefficient;}}return recomposeColor(color);}/**\n * Lightens a color.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {number} coefficient - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */export function lighten(color,coefficient){color=decomposeColor(color);coefficient=clamp(coefficient);if(color.type.indexOf('hsl')!==-1){color.values[2]+=(100-color.values[2])*coefficient;}else if(color.type.indexOf('rgb')!==-1){for(var i=0;i<3;i+=1){color.values[i]+=(255-color.values[i])*coefficient;}}return recomposeColor(color);}","map":{"version":3,"sources":["C:/Users/recse/Desktop/PORTFOLIOS/descargador/cliente/src/node_modules/@material-ui/core/esm/styles/colorManipulator.js"],"names":["formatMuiErrorMessage","_formatMuiErrorMessage","clamp","value","min","arguments","length","undefined","max","process","env","NODE_ENV","console","error","concat","Math","hexToRgb","color","substr","re","RegExp","colors","match","map","n","index","parseInt","round","join","intToHex","int","hex","toString","rgbToHex","indexOf","_decomposeColor","decomposeColor","values","hslToRgb","_color","h","s","l","a","f","k","type","rgb","push","recomposeColor","charAt","marker","substring","Error","split","parseFloat","i","getContrastRatio","foreground","background","lumA","getLuminance","lumB","val","pow","Number","toFixed","emphasize","coefficient","darken","lighten","fade"],"mappings":"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","sourcesContent":["import { formatMuiErrorMessage as _formatMuiErrorMessage } from \"@material-ui/utils\";\n\n/* eslint-disable no-use-before-define */\n\n/**\n * Returns a number whose value is limited to the given range.\n *\n * @param {number} value The value to be clamped\n * @param {number} min The lower boundary of the output range\n * @param {number} max The upper boundary of the output range\n * @returns {number} A number in the range [min, max]\n */\nfunction clamp(value) {\n  var min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var max = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (value < min || value > max) {\n      console.error(\"Material-UI: The value provided \".concat(value, \" is out of range [\").concat(min, \", \").concat(max, \"].\"));\n    }\n  }\n\n  return Math.min(Math.max(min, value), max);\n}\n/**\n * Converts a color from CSS hex format to CSS rgb format.\n *\n * @param {string} color - Hex color, i.e. #nnn or #nnnnnn\n * @returns {string} A CSS rgb color string\n */\n\n\nexport function hexToRgb(color) {\n  color = color.substr(1);\n  var re = new RegExp(\".{1,\".concat(color.length >= 6 ? 2 : 1, \"}\"), 'g');\n  var colors = color.match(re);\n\n  if (colors && colors[0].length === 1) {\n    colors = colors.map(function (n) {\n      return n + n;\n    });\n  }\n\n  return colors ? \"rgb\".concat(colors.length === 4 ? 'a' : '', \"(\").concat(colors.map(function (n, index) {\n    return index < 3 ? parseInt(n, 16) : Math.round(parseInt(n, 16) / 255 * 1000) / 1000;\n  }).join(', '), \")\") : '';\n}\n\nfunction intToHex(int) {\n  var hex = int.toString(16);\n  return hex.length === 1 ? \"0\".concat(hex) : hex;\n}\n/**\n * Converts a color from CSS rgb format to CSS hex format.\n *\n * @param {string} color - RGB color, i.e. rgb(n, n, n)\n * @returns {string} A CSS rgb color string, i.e. #nnnnnn\n */\n\n\nexport function rgbToHex(color) {\n  // Idempotent\n  if (color.indexOf('#') === 0) {\n    return color;\n  }\n\n  var _decomposeColor = decomposeColor(color),\n      values = _decomposeColor.values;\n\n  return \"#\".concat(values.map(function (n) {\n    return intToHex(n);\n  }).join(''));\n}\n/**\n * Converts a color from hsl format to rgb format.\n *\n * @param {string} color - HSL color values\n * @returns {string} rgb color values\n */\n\nexport function hslToRgb(color) {\n  color = decomposeColor(color);\n  var _color = color,\n      values = _color.values;\n  var h = values[0];\n  var s = values[1] / 100;\n  var l = values[2] / 100;\n  var a = s * Math.min(l, 1 - l);\n\n  var f = function f(n) {\n    var k = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : (n + h / 30) % 12;\n    return l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n  };\n\n  var type = 'rgb';\n  var rgb = [Math.round(f(0) * 255), Math.round(f(8) * 255), Math.round(f(4) * 255)];\n\n  if (color.type === 'hsla') {\n    type += 'a';\n    rgb.push(values[3]);\n  }\n\n  return recomposeColor({\n    type: type,\n    values: rgb\n  });\n}\n/**\n * Returns an object with the type and values of a color.\n *\n * Note: Does not support rgb % values.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @returns {object} - A MUI color object: {type: string, values: number[]}\n */\n\nexport function decomposeColor(color) {\n  // Idempotent\n  if (color.type) {\n    return color;\n  }\n\n  if (color.charAt(0) === '#') {\n    return decomposeColor(hexToRgb(color));\n  }\n\n  var marker = color.indexOf('(');\n  var type = color.substring(0, marker);\n\n  if (['rgb', 'rgba', 'hsl', 'hsla'].indexOf(type) === -1) {\n    throw new Error(process.env.NODE_ENV !== \"production\" ? \"Material-UI: Unsupported `\".concat(color, \"` color.\\nWe support the following formats: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla().\") : _formatMuiErrorMessage(3, color));\n  }\n\n  var values = color.substring(marker + 1, color.length - 1).split(',');\n  values = values.map(function (value) {\n    return parseFloat(value);\n  });\n  return {\n    type: type,\n    values: values\n  };\n}\n/**\n * Converts a color object with type and values to a string.\n *\n * @param {object} color - Decomposed color\n * @param {string} color.type - One of: 'rgb', 'rgba', 'hsl', 'hsla'\n * @param {array} color.values - [n,n,n] or [n,n,n,n]\n * @returns {string} A CSS color string\n */\n\nexport function recomposeColor(color) {\n  var type = color.type;\n  var values = color.values;\n\n  if (type.indexOf('rgb') !== -1) {\n    // Only convert the first 3 values to int (i.e. not alpha)\n    values = values.map(function (n, i) {\n      return i < 3 ? parseInt(n, 10) : n;\n    });\n  } else if (type.indexOf('hsl') !== -1) {\n    values[1] = \"\".concat(values[1], \"%\");\n    values[2] = \"\".concat(values[2], \"%\");\n  }\n\n  return \"\".concat(type, \"(\").concat(values.join(', '), \")\");\n}\n/**\n * Calculates the contrast ratio between two colors.\n *\n * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\n *\n * @param {string} foreground - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {string} background - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @returns {number} A contrast ratio value in the range 0 - 21.\n */\n\nexport function getContrastRatio(foreground, background) {\n  var lumA = getLuminance(foreground);\n  var lumB = getLuminance(background);\n  return (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);\n}\n/**\n * The relative brightness of any point in a color space,\n * normalized to 0 for darkest black and 1 for lightest white.\n *\n * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @returns {number} The relative brightness of the color in the range 0 - 1\n */\n\nexport function getLuminance(color) {\n  color = decomposeColor(color);\n  var rgb = color.type === 'hsl' ? decomposeColor(hslToRgb(color)).values : color.values;\n  rgb = rgb.map(function (val) {\n    val /= 255; // normalized\n\n    return val <= 0.03928 ? val / 12.92 : Math.pow((val + 0.055) / 1.055, 2.4);\n  }); // Truncate at 3 digits\n\n  return Number((0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2]).toFixed(3));\n}\n/**\n * Darken or lighten a color, depending on its luminance.\n * Light colors are darkened, dark colors are lightened.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {number} coefficient=0.15 - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\n\nexport function emphasize(color) {\n  var coefficient = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.15;\n  return getLuminance(color) > 0.5 ? darken(color, coefficient) : lighten(color, coefficient);\n}\n/**\n * Set the absolute transparency of a color.\n * Any existing alpha values are overwritten.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {number} value - value to set the alpha channel to in the range 0 -1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\n\nexport function fade(color, value) {\n  color = decomposeColor(color);\n  value = clamp(value);\n\n  if (color.type === 'rgb' || color.type === 'hsl') {\n    color.type += 'a';\n  }\n\n  color.values[3] = value;\n  return recomposeColor(color);\n}\n/**\n * Darkens a color.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {number} coefficient - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\n\nexport function darken(color, coefficient) {\n  color = decomposeColor(color);\n  coefficient = clamp(coefficient);\n\n  if (color.type.indexOf('hsl') !== -1) {\n    color.values[2] *= 1 - coefficient;\n  } else if (color.type.indexOf('rgb') !== -1) {\n    for (var i = 0; i < 3; i += 1) {\n      color.values[i] *= 1 - coefficient;\n    }\n  }\n\n  return recomposeColor(color);\n}\n/**\n * Lightens a color.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {number} coefficient - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\n\nexport function lighten(color, coefficient) {\n  color = decomposeColor(color);\n  coefficient = clamp(coefficient);\n\n  if (color.type.indexOf('hsl') !== -1) {\n    color.values[2] += (100 - color.values[2]) * coefficient;\n  } else if (color.type.indexOf('rgb') !== -1) {\n    for (var i = 0; i < 3; i += 1) {\n      color.values[i] += (255 - color.values[i]) * coefficient;\n    }\n  }\n\n  return recomposeColor(color);\n}"]},"metadata":{},"sourceType":"module"}