{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\recse\\\\Desktop\\\\PORTFOLIOS\\\\descargador\\\\cliente\\\\src\\\\componentes\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport '../css/App.css';\nimport { PlayCircleFilled } from \"@material-ui/icons\";\nimport React, { useState } from \"react\";\nimport codigo from '../componentes/codigo'; // Backend url constant\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst backend_uri = \"http://localhost:5000\";\n\nasync function downloadRequest(url, downloadFormat) {\n  // Send download request to custom url\n  let customUrl = `${backend_uri}/download?url=${url}&format=${downloadFormat}`;\n  const res = await fetch(customUrl);\n\n  try {\n    if (res.status === 200) {\n      // Open custom url to initiate download\n      window.location.assign(customUrl);\n    }\n  } catch (e) {\n    console.error(e);\n  }\n}\n\nfunction App() {\n  _s();\n\n  // State\n  const [selectedDownloadOption, setSelectedDownloadOption] = useState(\"mp4\"); // Web page html\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container2\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"downloadBtn\",\n        onClick: () => downloadRequest(document.getElementById(\"url_input\").value, selectedDownloadOption),\n        children: /*#__PURE__*/_jsxDEV(PlayCircleFilled, {\n          className: \"playBtnIcon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"url_input\",\n          autoComplete: \"off\",\n          placeholder: \"Paste video URL here\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        id: \"buttonRow\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: selectedDownloadOption === \"mp4\" ? \"selectedDownloadOption\" : \"downloadOption\",\n          onClick: () => {\n            setSelectedDownloadOption(\"mp4\");\n          },\n          children: \"mp4\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: selectedDownloadOption === \"mp3\" ? \"selectedDownloadOption\" : \"downloadOption\",\n          onClick: () => {\n            setSelectedDownloadOption(\"mp3\");\n          },\n          children: \"mp3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"CdViE9CPInn9gp0H1ApxxHDTZjM=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/recse/Desktop/PORTFOLIOS/descargador/cliente/src/componentes/App.js"],"names":["PlayCircleFilled","React","useState","codigo","backend_uri","downloadRequest","url","downloadFormat","customUrl","res","fetch","status","window","location","assign","e","console","error","App","selectedDownloadOption","setSelectedDownloadOption","document","getElementById","value"],"mappings":";;;AAAA,OAAO,gBAAP;AACA,SAASA,gBAAT,QAAiC,oBAAjC;AACA,OAAOC,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,MAAP,MAAmB,uBAAnB,C,CAEA;;;AACA,MAAMC,WAAW,GAAG,uBAApB;;AAEA,eAAeC,eAAf,CAA+BC,GAA/B,EAAoCC,cAApC,EAAoD;AAClD;AACA,MAAIC,SAAS,GAAI,GAAEJ,WAAY,iBAAgBE,GAAI,WAAUC,cAAe,EAA5E;AACA,QAAME,GAAG,GAAG,MAAMC,KAAK,CAACF,SAAD,CAAvB;;AAEA,MAAI;AACF,QAAIC,GAAG,CAACE,MAAJ,KAAe,GAAnB,EAAwB;AACtB;AACAC,MAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB,CAAuBN,SAAvB;AACD;AACF,GALD,CAKE,OAAOO,CAAP,EAAU;AACVC,IAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACD;AACF;;AAED,SAASG,GAAT,GAAe;AAAA;;AACb;AACA,QAAM,CAACC,sBAAD,EAAyBC,yBAAzB,IAAsDlB,QAAQ,CAAC,KAAD,CAApE,CAFa,CAIb;;AACA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA,8BACE;AAAQ,QAAA,EAAE,EAAC,aAAX;AAAyB,QAAA,OAAO,EAAE,MAAMG,eAAe,CAACgB,QAAQ,CAACC,cAAT,CAAwB,WAAxB,EAAqCC,KAAtC,EAA6CJ,sBAA7C,CAAvD;AAAA,+BACE,QAAC,gBAAD;AAAkB,UAAA,SAAS,EAAC;AAA5B;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADF,eAKE;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA,+BACE;AAAO,UAAA,IAAI,EAAC,MAAZ;AAAmB,UAAA,EAAE,EAAC,WAAtB;AAAkC,UAAA,YAAY,EAAC,KAA/C;AAAqD,UAAA,WAAW,EAAC;AAAjE;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cALF,eASE;AAAK,QAAA,SAAS,EAAC,KAAf;AAAqB,QAAA,EAAE,EAAC,WAAxB;AAAA,gCACE;AACE,UAAA,SAAS,EAAEA,sBAAsB,KAAK,KAA3B,GAAmC,wBAAnC,GAA8D,gBAD3E;AAEE,UAAA,OAAO,EAAE,MAAM;AAACC,YAAAA,yBAAyB,CAAC,KAAD,CAAzB;AAAiC,WAFnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAQE;AACE,UAAA,SAAS,EAAED,sBAAsB,KAAK,KAA3B,GAAmC,wBAAnC,GAA8D,gBAD3E;AAEE,UAAA,OAAO,EAAE,MAAM;AAACC,YAAAA,yBAAyB,CAAC,KAAD,CAAzB;AAAiC,WAFnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBARF;AAAA;AAAA;AAAA;AAAA;AAAA,cATF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AA6BD;;GAlCQF,G;;KAAAA,G;AAoCT,eAAeA,GAAf","sourcesContent":["import '../css/App.css';\nimport { PlayCircleFilled } from \"@material-ui/icons\";\nimport React, { useState } from \"react\";\nimport codigo from '../componentes/codigo'\n\n// Backend url constant\nconst backend_uri = \"http://localhost:5000\"\n\nasync function downloadRequest(url, downloadFormat) {\n  // Send download request to custom url\n  let customUrl = `${backend_uri}/download?url=${url}&format=${downloadFormat}`;\n  const res = await fetch(customUrl);\n\n  try {\n    if (res.status === 200) {\n      // Open custom url to initiate download\n      window.location.assign(customUrl);\n    }\n  } catch (e) {\n    console.error(e);\n  }\n}\n\nfunction App() {\n  // State\n  const [selectedDownloadOption, setSelectedDownloadOption] = useState(\"mp4\");\n \n  // Web page html\n  return (\n    <div className=\"App\">\n      <div className=\"container2\">\n        <button id=\"downloadBtn\" onClick={() => downloadRequest(document.getElementById(\"url_input\").value, selectedDownloadOption)}>\n          <PlayCircleFilled className=\"playBtnIcon\" />\n        </button>\n\n        <div className=\"row\">\n          <input type=\"text\" id=\"url_input\" autoComplete=\"off\" placeholder=\"Paste video URL here\"></input>\n        </div>\n\n        <div className=\"row\" id=\"buttonRow\">\n          <button \n            className={selectedDownloadOption === \"mp4\" ? \"selectedDownloadOption\" : \"downloadOption\"} \n            onClick={() => {setSelectedDownloadOption(\"mp4\")}}\n          >\n            mp4\n          </button>\n\n          <button \n            className={selectedDownloadOption === \"mp3\" ? \"selectedDownloadOption\" : \"downloadOption\"} \n            onClick={() => {setSelectedDownloadOption(\"mp3\")}}\n          >\n            mp3\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}