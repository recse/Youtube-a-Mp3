{"ast":null,"code":"import _extends from\"@babel/runtime/helpers/esm/extends\";import{getDisplayName}from'@material-ui/utils';export default function mergeClasses(){var options=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};var baseClasses=options.baseClasses,newClasses=options.newClasses,Component=options.Component;if(!newClasses){return baseClasses;}var nextClasses=_extends({},baseClasses);if(process.env.NODE_ENV!=='production'){if(typeof newClasses==='string'){console.error([\"Material-UI: The value `\".concat(newClasses,\"` \")+\"provided to the classes prop of \".concat(getDisplayName(Component),\" is incorrect.\"),'You might want to use the className prop instead.'].join('\\n'));return baseClasses;}}Object.keys(newClasses).forEach(function(key){if(process.env.NODE_ENV!=='production'){if(!baseClasses[key]&&newClasses[key]){console.error([\"Material-UI: The key `\".concat(key,\"` \")+\"provided to the classes prop is not implemented in \".concat(getDisplayName(Component),\".\"),\"You can only override one of the following: \".concat(Object.keys(baseClasses).join(','),\".\")].join('\\n'));}if(newClasses[key]&&typeof newClasses[key]!=='string'){console.error([\"Material-UI: The key `\".concat(key,\"` \")+\"provided to the classes prop is not valid for \".concat(getDisplayName(Component),\".\"),\"You need to provide a non empty string instead of: \".concat(newClasses[key],\".\")].join('\\n'));}}if(newClasses[key]){nextClasses[key]=\"\".concat(baseClasses[key],\" \").concat(newClasses[key]);}});return nextClasses;}","map":{"version":3,"sources":["C:/Users/recse/Desktop/PORTFOLIOS/descargador/cliente/src/node_modules/@material-ui/styles/esm/mergeClasses/mergeClasses.js"],"names":["_extends","getDisplayName","mergeClasses","options","arguments","length","undefined","baseClasses","newClasses","Component","nextClasses","process","env","NODE_ENV","console","error","concat","join","Object","keys","forEach","key"],"mappings":"AAAA,MAAOA,CAAAA,QAAP,KAAqB,oCAArB,CACA,OAASC,cAAT,KAA+B,oBAA/B,CACA,cAAe,SAASC,CAAAA,YAAT,EAAwB,CACrC,GAAIC,CAAAA,OAAO,CAAGC,SAAS,CAACC,MAAV,CAAmB,CAAnB,EAAwBD,SAAS,CAAC,CAAD,CAAT,GAAiBE,SAAzC,CAAqDF,SAAS,CAAC,CAAD,CAA9D,CAAoE,EAAlF,CACA,GAAIG,CAAAA,WAAW,CAAGJ,OAAO,CAACI,WAA1B,CACIC,UAAU,CAAGL,OAAO,CAACK,UADzB,CAEIC,SAAS,CAAGN,OAAO,CAACM,SAFxB,CAIA,GAAI,CAACD,UAAL,CAAiB,CACf,MAAOD,CAAAA,WAAP,CACD,CAED,GAAIG,CAAAA,WAAW,CAAGV,QAAQ,CAAC,EAAD,CAAKO,WAAL,CAA1B,CAEA,GAAII,OAAO,CAACC,GAAR,CAAYC,QAAZ,GAAyB,YAA7B,CAA2C,CACzC,GAAI,MAAOL,CAAAA,UAAP,GAAsB,QAA1B,CAAoC,CAClCM,OAAO,CAACC,KAAR,CAAc,CAAC,2BAA2BC,MAA3B,CAAkCR,UAAlC,CAA8C,IAA9C,EAAsD,mCAAmCQ,MAAnC,CAA0Cf,cAAc,CAACQ,SAAD,CAAxD,CAAqE,gBAArE,CAAvD,CAA+I,mDAA/I,EAAoMQ,IAApM,CAAyM,IAAzM,CAAd,EACA,MAAOV,CAAAA,WAAP,CACD,CACF,CAEDW,MAAM,CAACC,IAAP,CAAYX,UAAZ,EAAwBY,OAAxB,CAAgC,SAAUC,GAAV,CAAe,CAC7C,GAAIV,OAAO,CAACC,GAAR,CAAYC,QAAZ,GAAyB,YAA7B,CAA2C,CACzC,GAAI,CAACN,WAAW,CAACc,GAAD,CAAZ,EAAqBb,UAAU,CAACa,GAAD,CAAnC,CAA0C,CACxCP,OAAO,CAACC,KAAR,CAAc,CAAC,yBAAyBC,MAAzB,CAAgCK,GAAhC,CAAqC,IAArC,EAA6C,sDAAsDL,MAAtD,CAA6Df,cAAc,CAACQ,SAAD,CAA3E,CAAwF,GAAxF,CAA9C,CAA4I,+CAA+CO,MAA/C,CAAsDE,MAAM,CAACC,IAAP,CAAYZ,WAAZ,EAAyBU,IAAzB,CAA8B,GAA9B,CAAtD,CAA0F,GAA1F,CAA5I,EAA4OA,IAA5O,CAAiP,IAAjP,CAAd,EACD,CAED,GAAIT,UAAU,CAACa,GAAD,CAAV,EAAmB,MAAOb,CAAAA,UAAU,CAACa,GAAD,CAAjB,GAA2B,QAAlD,CAA4D,CAC1DP,OAAO,CAACC,KAAR,CAAc,CAAC,yBAAyBC,MAAzB,CAAgCK,GAAhC,CAAqC,IAArC,EAA6C,iDAAiDL,MAAjD,CAAwDf,cAAc,CAACQ,SAAD,CAAtE,CAAmF,GAAnF,CAA9C,CAAuI,sDAAsDO,MAAtD,CAA6DR,UAAU,CAACa,GAAD,CAAvE,CAA8E,GAA9E,CAAvI,EAA2NJ,IAA3N,CAAgO,IAAhO,CAAd,EACD,CACF,CAED,GAAIT,UAAU,CAACa,GAAD,CAAd,CAAqB,CACnBX,WAAW,CAACW,GAAD,CAAX,CAAmB,GAAGL,MAAH,CAAUT,WAAW,CAACc,GAAD,CAArB,CAA4B,GAA5B,EAAiCL,MAAjC,CAAwCR,UAAU,CAACa,GAAD,CAAlD,CAAnB,CACD,CACF,CAdD,EAeA,MAAOX,CAAAA,WAAP,CACD","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { getDisplayName } from '@material-ui/utils';\nexport default function mergeClasses() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var baseClasses = options.baseClasses,\n      newClasses = options.newClasses,\n      Component = options.Component;\n\n  if (!newClasses) {\n    return baseClasses;\n  }\n\n  var nextClasses = _extends({}, baseClasses);\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof newClasses === 'string') {\n      console.error([\"Material-UI: The value `\".concat(newClasses, \"` \") + \"provided to the classes prop of \".concat(getDisplayName(Component), \" is incorrect.\"), 'You might want to use the className prop instead.'].join('\\n'));\n      return baseClasses;\n    }\n  }\n\n  Object.keys(newClasses).forEach(function (key) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!baseClasses[key] && newClasses[key]) {\n        console.error([\"Material-UI: The key `\".concat(key, \"` \") + \"provided to the classes prop is not implemented in \".concat(getDisplayName(Component), \".\"), \"You can only override one of the following: \".concat(Object.keys(baseClasses).join(','), \".\")].join('\\n'));\n      }\n\n      if (newClasses[key] && typeof newClasses[key] !== 'string') {\n        console.error([\"Material-UI: The key `\".concat(key, \"` \") + \"provided to the classes prop is not valid for \".concat(getDisplayName(Component), \".\"), \"You need to provide a non empty string instead of: \".concat(newClasses[key], \".\")].join('\\n'));\n      }\n    }\n\n    if (newClasses[key]) {\n      nextClasses[key] = \"\".concat(baseClasses[key], \" \").concat(newClasses[key]);\n    }\n  });\n  return nextClasses;\n}"]},"metadata":{},"sourceType":"module"}