{"ast":null,"code":"import _extends from\"@babel/runtime/helpers/esm/extends\";import React from'react';import{exactProp}from'@material-ui/utils';import ThemeContext from'../useTheme/ThemeContext';import useTheme from'../useTheme';import nested from'./nested';// To support composition of theme.\nfunction mergeOuterLocalTheme(outerTheme,localTheme){if(typeof localTheme==='function'){var mergedTheme=localTheme(outerTheme);if(process.env.NODE_ENV!=='production'){if(!mergedTheme){console.error(['Material-UI: You should return an object from your theme function, i.e.','<ThemeProvider theme={() => ({})} />'].join('\\n'));}}return mergedTheme;}return _extends({},outerTheme,localTheme);}/**\n * This component takes a `theme` prop.\n * It makes the `theme` available down the React tree thanks to React context.\n * This component should preferably be used at **the root of your component tree**.\n */function ThemeProvider(props){var children=props.children,localTheme=props.theme;var outerTheme=useTheme();if(process.env.NODE_ENV!=='production'){if(outerTheme===null&&typeof localTheme==='function'){console.error(['Material-UI: You are providing a theme function prop to the ThemeProvider component:','<ThemeProvider theme={outerTheme => outerTheme} />','','However, no outer theme is present.','Make sure a theme is already injected higher in the React tree '+'or provide a theme object.'].join('\\n'));}}var theme=React.useMemo(function(){var output=outerTheme===null?localTheme:mergeOuterLocalTheme(outerTheme,localTheme);if(output!=null){output[nested]=outerTheme!==null;}return output;},[localTheme,outerTheme]);return/*#__PURE__*/React.createElement(ThemeContext.Provider,{value:theme},children);}process.env.NODE_ENV!==\"production\"?void 0:void 0;if(process.env.NODE_ENV!=='production'){process.env.NODE_ENV!==\"production\"?void 0:void 0;}export default ThemeProvider;","map":{"version":3,"sources":["C:/Users/recse/Desktop/PORTFOLIOS/descargador/cliente/src/node_modules/@material-ui/styles/esm/ThemeProvider/ThemeProvider.js"],"names":["_extends","React","exactProp","ThemeContext","useTheme","nested","mergeOuterLocalTheme","outerTheme","localTheme","mergedTheme","process","env","NODE_ENV","console","error","join","ThemeProvider","props","children","theme","useMemo","output","createElement","Provider","value"],"mappings":"AAAA,MAAOA,CAAAA,QAAP,KAAqB,oCAArB,CACA,MAAOC,CAAAA,KAAP,KAAkB,OAAlB,CAEA,OAASC,SAAT,KAA0B,oBAA1B,CACA,MAAOC,CAAAA,YAAP,KAAyB,0BAAzB,CACA,MAAOC,CAAAA,QAAP,KAAqB,aAArB,CACA,MAAOC,CAAAA,MAAP,KAAmB,UAAnB,CAA+B;AAE/B,QAASC,CAAAA,oBAAT,CAA8BC,UAA9B,CAA0CC,UAA1C,CAAsD,CACpD,GAAI,MAAOA,CAAAA,UAAP,GAAsB,UAA1B,CAAsC,CACpC,GAAIC,CAAAA,WAAW,CAAGD,UAAU,CAACD,UAAD,CAA5B,CAEA,GAAIG,OAAO,CAACC,GAAR,CAAYC,QAAZ,GAAyB,YAA7B,CAA2C,CACzC,GAAI,CAACH,WAAL,CAAkB,CAChBI,OAAO,CAACC,KAAR,CAAc,CAAC,yEAAD,CAA4E,sCAA5E,EAAoHC,IAApH,CAAyH,IAAzH,CAAd,EACD,CACF,CAED,MAAON,CAAAA,WAAP,CACD,CAED,MAAOT,CAAAA,QAAQ,CAAC,EAAD,CAAKO,UAAL,CAAiBC,UAAjB,CAAf,CACD,CACD;AACA;AACA;AACA;AACA,GAGA,QAASQ,CAAAA,aAAT,CAAuBC,KAAvB,CAA8B,CAC5B,GAAIC,CAAAA,QAAQ,CAAGD,KAAK,CAACC,QAArB,CACIV,UAAU,CAAGS,KAAK,CAACE,KADvB,CAEA,GAAIZ,CAAAA,UAAU,CAAGH,QAAQ,EAAzB,CAEA,GAAIM,OAAO,CAACC,GAAR,CAAYC,QAAZ,GAAyB,YAA7B,CAA2C,CACzC,GAAIL,UAAU,GAAK,IAAf,EAAuB,MAAOC,CAAAA,UAAP,GAAsB,UAAjD,CAA6D,CAC3DK,OAAO,CAACC,KAAR,CAAc,CAAC,sFAAD,CAAyF,oDAAzF,CAA+I,EAA/I,CAAmJ,qCAAnJ,CAA0L,kEAAoE,4BAA9P,EAA4RC,IAA5R,CAAiS,IAAjS,CAAd,EACD,CACF,CAED,GAAII,CAAAA,KAAK,CAAGlB,KAAK,CAACmB,OAAN,CAAc,UAAY,CACpC,GAAIC,CAAAA,MAAM,CAAGd,UAAU,GAAK,IAAf,CAAsBC,UAAtB,CAAmCF,oBAAoB,CAACC,UAAD,CAAaC,UAAb,CAApE,CAEA,GAAIa,MAAM,EAAI,IAAd,CAAoB,CAClBA,MAAM,CAAChB,MAAD,CAAN,CAAiBE,UAAU,GAAK,IAAhC,CACD,CAED,MAAOc,CAAAA,MAAP,CACD,CARW,CAQT,CAACb,UAAD,CAAaD,UAAb,CARS,CAAZ,CASA,MAAO,aAAaN,KAAK,CAACqB,aAAN,CAAoBnB,YAAY,CAACoB,QAAjC,CAA2C,CAC7DC,KAAK,CAAEL,KADsD,CAA3C,CAEjBD,QAFiB,CAApB,CAGD,CAEDR,OAAO,CAACC,GAAR,CAAYC,QAAZ,GAAyB,YAAzB,QAUI,IAAK,EAVT,CAYA,GAAIF,OAAO,CAACC,GAAR,CAAYC,QAAZ,GAAyB,YAA7B,CAA2C,CACzCF,OAAO,CAACC,GAAR,CAAYC,QAAZ,GAAyB,YAAzB,QAAuG,IAAK,EAA5G,CACD,CAED,cAAeI,CAAAA,aAAf","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { exactProp } from '@material-ui/utils';\nimport ThemeContext from '../useTheme/ThemeContext';\nimport useTheme from '../useTheme';\nimport nested from './nested'; // To support composition of theme.\n\nfunction mergeOuterLocalTheme(outerTheme, localTheme) {\n  if (typeof localTheme === 'function') {\n    var mergedTheme = localTheme(outerTheme);\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (!mergedTheme) {\n        console.error(['Material-UI: You should return an object from your theme function, i.e.', '<ThemeProvider theme={() => ({})} />'].join('\\n'));\n      }\n    }\n\n    return mergedTheme;\n  }\n\n  return _extends({}, outerTheme, localTheme);\n}\n/**\n * This component takes a `theme` prop.\n * It makes the `theme` available down the React tree thanks to React context.\n * This component should preferably be used at **the root of your component tree**.\n */\n\n\nfunction ThemeProvider(props) {\n  var children = props.children,\n      localTheme = props.theme;\n  var outerTheme = useTheme();\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (outerTheme === null && typeof localTheme === 'function') {\n      console.error(['Material-UI: You are providing a theme function prop to the ThemeProvider component:', '<ThemeProvider theme={outerTheme => outerTheme} />', '', 'However, no outer theme is present.', 'Make sure a theme is already injected higher in the React tree ' + 'or provide a theme object.'].join('\\n'));\n    }\n  }\n\n  var theme = React.useMemo(function () {\n    var output = outerTheme === null ? localTheme : mergeOuterLocalTheme(outerTheme, localTheme);\n\n    if (output != null) {\n      output[nested] = outerTheme !== null;\n    }\n\n    return output;\n  }, [localTheme, outerTheme]);\n  return /*#__PURE__*/React.createElement(ThemeContext.Provider, {\n    value: theme\n  }, children);\n}\n\nprocess.env.NODE_ENV !== \"production\" ? ThemeProvider.propTypes = {\n  /**\n   * Your component tree.\n   */\n  children: PropTypes.node.isRequired,\n\n  /**\n   * A theme object. You can provide a function to extend the outer theme.\n   */\n  theme: PropTypes.oneOfType([PropTypes.object, PropTypes.func]).isRequired\n} : void 0;\n\nif (process.env.NODE_ENV !== 'production') {\n  process.env.NODE_ENV !== \"production\" ? ThemeProvider.propTypes = exactProp(ThemeProvider.propTypes) : void 0;\n}\n\nexport default ThemeProvider;"]},"metadata":{},"sourceType":"module"}