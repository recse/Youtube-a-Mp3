{"ast":null,"code":"// based on https://github.com/WICG/focus-visible/blob/v4.1.5/src/focus-visible.js\nimport*as React from'react';import*as ReactDOM from'react-dom';var hadKeyboardEvent=true;var hadFocusVisibleRecently=false;var hadFocusVisibleRecentlyTimeout=null;var inputTypesWhitelist={text:true,search:true,url:true,tel:true,email:true,password:true,number:true,date:true,month:true,week:true,time:true,datetime:true,'datetime-local':true};/**\n * Computes whether the given element should automatically trigger the\n * `focus-visible` class being added, i.e. whether it should always match\n * `:focus-visible` when focused.\n * @param {Element} node\n * @return {boolean}\n */function focusTriggersKeyboardModality(node){var type=node.type,tagName=node.tagName;if(tagName==='INPUT'&&inputTypesWhitelist[type]&&!node.readOnly){return true;}if(tagName==='TEXTAREA'&&!node.readOnly){return true;}if(node.isContentEditable){return true;}return false;}/**\n * Keep track of our keyboard modality state with `hadKeyboardEvent`.\n * If the most recent user interaction was via the keyboard;\n * and the key press did not include a meta, alt/option, or control key;\n * then the modality is keyboard. Otherwise, the modality is not keyboard.\n * @param {KeyboardEvent} event\n */function handleKeyDown(event){if(event.metaKey||event.altKey||event.ctrlKey){return;}hadKeyboardEvent=true;}/**\n * If at any point a user clicks with a pointing device, ensure that we change\n * the modality away from keyboard.\n * This avoids the situation where a user presses a key on an already focused\n * element, and then clicks on a different element, focusing it with a\n * pointing device, while we still think we're in keyboard modality.\n */function handlePointerDown(){hadKeyboardEvent=false;}function handleVisibilityChange(){if(this.visibilityState==='hidden'){// If the tab becomes active again, the browser will handle calling focus\n// on the element (Safari actually calls it twice).\n// If this tab change caused a blur on an element with focus-visible,\n// re-apply the class when the user switches back to the tab.\nif(hadFocusVisibleRecently){hadKeyboardEvent=true;}}}function prepare(doc){doc.addEventListener('keydown',handleKeyDown,true);doc.addEventListener('mousedown',handlePointerDown,true);doc.addEventListener('pointerdown',handlePointerDown,true);doc.addEventListener('touchstart',handlePointerDown,true);doc.addEventListener('visibilitychange',handleVisibilityChange,true);}export function teardown(doc){doc.removeEventListener('keydown',handleKeyDown,true);doc.removeEventListener('mousedown',handlePointerDown,true);doc.removeEventListener('pointerdown',handlePointerDown,true);doc.removeEventListener('touchstart',handlePointerDown,true);doc.removeEventListener('visibilitychange',handleVisibilityChange,true);}function isFocusVisible(event){var target=event.target;try{return target.matches(':focus-visible');}catch(error){}// browsers not implementing :focus-visible will throw a SyntaxError\n// we use our own heuristic for those browsers\n// rethrow might be better if it's not the expected error but do we really\n// want to crash if focus-visible malfunctioned?\n// no need for validFocusTarget check. the user does that by attaching it to\n// focusable events only\nreturn hadKeyboardEvent||focusTriggersKeyboardModality(target);}/**\n * Should be called if a blur event is fired on a focus-visible element\n */function handleBlurVisible(){// To detect a tab/window switch, we look for a blur event followed\n// rapidly by a visibility change.\n// If we don't see a visibility change within 100ms, it's probably a\n// regular focus change.\nhadFocusVisibleRecently=true;window.clearTimeout(hadFocusVisibleRecentlyTimeout);hadFocusVisibleRecentlyTimeout=window.setTimeout(function(){hadFocusVisibleRecently=false;},100);}export default function useIsFocusVisible(){var ref=React.useCallback(function(instance){var node=ReactDOM.findDOMNode(instance);if(node!=null){prepare(node.ownerDocument);}},[]);if(process.env.NODE_ENV!=='production'){// eslint-disable-next-line react-hooks/rules-of-hooks\nReact.useDebugValue(isFocusVisible);}return{isFocusVisible:isFocusVisible,onBlurVisible:handleBlurVisible,ref:ref};}","map":{"version":3,"sources":["C:/Users/recse/Desktop/PORTFOLIOS/descargador/cliente/src/node_modules/@material-ui/core/esm/utils/useIsFocusVisible.js"],"names":["React","ReactDOM","hadKeyboardEvent","hadFocusVisibleRecently","hadFocusVisibleRecentlyTimeout","inputTypesWhitelist","text","search","url","tel","email","password","number","date","month","week","time","datetime","focusTriggersKeyboardModality","node","type","tagName","readOnly","isContentEditable","handleKeyDown","event","metaKey","altKey","ctrlKey","handlePointerDown","handleVisibilityChange","visibilityState","prepare","doc","addEventListener","teardown","removeEventListener","isFocusVisible","target","matches","error","handleBlurVisible","window","clearTimeout","setTimeout","useIsFocusVisible","ref","useCallback","instance","findDOMNode","ownerDocument","process","env","NODE_ENV","useDebugValue","onBlurVisible"],"mappings":"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","sourcesContent":["// based on https://github.com/WICG/focus-visible/blob/v4.1.5/src/focus-visible.js\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nvar hadKeyboardEvent = true;\nvar hadFocusVisibleRecently = false;\nvar hadFocusVisibleRecentlyTimeout = null;\nvar inputTypesWhitelist = {\n  text: true,\n  search: true,\n  url: true,\n  tel: true,\n  email: true,\n  password: true,\n  number: true,\n  date: true,\n  month: true,\n  week: true,\n  time: true,\n  datetime: true,\n  'datetime-local': true\n};\n/**\n * Computes whether the given element should automatically trigger the\n * `focus-visible` class being added, i.e. whether it should always match\n * `:focus-visible` when focused.\n * @param {Element} node\n * @return {boolean}\n */\n\nfunction focusTriggersKeyboardModality(node) {\n  var type = node.type,\n      tagName = node.tagName;\n\n  if (tagName === 'INPUT' && inputTypesWhitelist[type] && !node.readOnly) {\n    return true;\n  }\n\n  if (tagName === 'TEXTAREA' && !node.readOnly) {\n    return true;\n  }\n\n  if (node.isContentEditable) {\n    return true;\n  }\n\n  return false;\n}\n/**\n * Keep track of our keyboard modality state with `hadKeyboardEvent`.\n * If the most recent user interaction was via the keyboard;\n * and the key press did not include a meta, alt/option, or control key;\n * then the modality is keyboard. Otherwise, the modality is not keyboard.\n * @param {KeyboardEvent} event\n */\n\n\nfunction handleKeyDown(event) {\n  if (event.metaKey || event.altKey || event.ctrlKey) {\n    return;\n  }\n\n  hadKeyboardEvent = true;\n}\n/**\n * If at any point a user clicks with a pointing device, ensure that we change\n * the modality away from keyboard.\n * This avoids the situation where a user presses a key on an already focused\n * element, and then clicks on a different element, focusing it with a\n * pointing device, while we still think we're in keyboard modality.\n */\n\n\nfunction handlePointerDown() {\n  hadKeyboardEvent = false;\n}\n\nfunction handleVisibilityChange() {\n  if (this.visibilityState === 'hidden') {\n    // If the tab becomes active again, the browser will handle calling focus\n    // on the element (Safari actually calls it twice).\n    // If this tab change caused a blur on an element with focus-visible,\n    // re-apply the class when the user switches back to the tab.\n    if (hadFocusVisibleRecently) {\n      hadKeyboardEvent = true;\n    }\n  }\n}\n\nfunction prepare(doc) {\n  doc.addEventListener('keydown', handleKeyDown, true);\n  doc.addEventListener('mousedown', handlePointerDown, true);\n  doc.addEventListener('pointerdown', handlePointerDown, true);\n  doc.addEventListener('touchstart', handlePointerDown, true);\n  doc.addEventListener('visibilitychange', handleVisibilityChange, true);\n}\n\nexport function teardown(doc) {\n  doc.removeEventListener('keydown', handleKeyDown, true);\n  doc.removeEventListener('mousedown', handlePointerDown, true);\n  doc.removeEventListener('pointerdown', handlePointerDown, true);\n  doc.removeEventListener('touchstart', handlePointerDown, true);\n  doc.removeEventListener('visibilitychange', handleVisibilityChange, true);\n}\n\nfunction isFocusVisible(event) {\n  var target = event.target;\n\n  try {\n    return target.matches(':focus-visible');\n  } catch (error) {} // browsers not implementing :focus-visible will throw a SyntaxError\n  // we use our own heuristic for those browsers\n  // rethrow might be better if it's not the expected error but do we really\n  // want to crash if focus-visible malfunctioned?\n  // no need for validFocusTarget check. the user does that by attaching it to\n  // focusable events only\n\n\n  return hadKeyboardEvent || focusTriggersKeyboardModality(target);\n}\n/**\n * Should be called if a blur event is fired on a focus-visible element\n */\n\n\nfunction handleBlurVisible() {\n  // To detect a tab/window switch, we look for a blur event followed\n  // rapidly by a visibility change.\n  // If we don't see a visibility change within 100ms, it's probably a\n  // regular focus change.\n  hadFocusVisibleRecently = true;\n  window.clearTimeout(hadFocusVisibleRecentlyTimeout);\n  hadFocusVisibleRecentlyTimeout = window.setTimeout(function () {\n    hadFocusVisibleRecently = false;\n  }, 100);\n}\n\nexport default function useIsFocusVisible() {\n  var ref = React.useCallback(function (instance) {\n    var node = ReactDOM.findDOMNode(instance);\n\n    if (node != null) {\n      prepare(node.ownerDocument);\n    }\n  }, []);\n\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useDebugValue(isFocusVisible);\n  }\n\n  return {\n    isFocusVisible: isFocusVisible,\n    onBlurVisible: handleBlurVisible,\n    ref: ref\n  };\n}"]},"metadata":{},"sourceType":"module"}