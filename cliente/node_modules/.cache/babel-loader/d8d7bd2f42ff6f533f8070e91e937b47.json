{"ast":null,"code":"import*as PropTypes from'prop-types';import chainPropTypes from'./chainPropTypes';function isClassComponent(elementType){// elementType.prototype?.isReactComponent\nvar _elementType$prototyp=elementType.prototype,prototype=_elementType$prototyp===void 0?{}:_elementType$prototyp;return Boolean(prototype.isReactComponent);}function elementTypeAcceptingRef(props,propName,componentName,location,propFullName){var propValue=props[propName];var safePropName=propFullName||propName;if(propValue==null){return null;}var warningHint;/**\n   * Blacklisting instead of whitelisting\n   *\n   * Blacklisting will miss some components, such as React.Fragment. Those will at least\n   * trigger a warning in React.\n   * We can't whitelist because there is no safe way to detect React.forwardRef\n   * or class components. \"Safe\" means there's no public API.\n   *\n   */if(typeof propValue==='function'&&!isClassComponent(propValue)){warningHint='Did you accidentally provide a plain function component instead?';}if(warningHint!==undefined){return new Error(\"Invalid \".concat(location,\" `\").concat(safePropName,\"` supplied to `\").concat(componentName,\"`. \")+\"Expected an element type that can hold a ref. \".concat(warningHint,\" \")+'For more information see https://material-ui.com/r/caveat-with-refs-guide');}return null;}export default chainPropTypes(PropTypes.elementType,elementTypeAcceptingRef);","map":{"version":3,"sources":["C:/Users/recse/Desktop/PORTFOLIOS/descargador/cliente/src/node_modules/@material-ui/utils/esm/elementTypeAcceptingRef.js"],"names":["PropTypes","chainPropTypes","isClassComponent","elementType","_elementType$prototyp","prototype","Boolean","isReactComponent","elementTypeAcceptingRef","props","propName","componentName","location","propFullName","propValue","safePropName","warningHint","undefined","Error","concat"],"mappings":"AAAA,MAAO,GAAKA,CAAAA,SAAZ,KAA2B,YAA3B,CACA,MAAOC,CAAAA,cAAP,KAA2B,kBAA3B,CAEA,QAASC,CAAAA,gBAAT,CAA0BC,WAA1B,CAAuC,CACrC;AACA,GAAIC,CAAAA,qBAAqB,CAAGD,WAAW,CAACE,SAAxC,CACIA,SAAS,CAAGD,qBAAqB,GAAK,IAAK,EAA/B,CAAmC,EAAnC,CAAwCA,qBADxD,CAEA,MAAOE,CAAAA,OAAO,CAACD,SAAS,CAACE,gBAAX,CAAd,CACD,CAED,QAASC,CAAAA,uBAAT,CAAiCC,KAAjC,CAAwCC,QAAxC,CAAkDC,aAAlD,CAAiEC,QAAjE,CAA2EC,YAA3E,CAAyF,CACvF,GAAIC,CAAAA,SAAS,CAAGL,KAAK,CAACC,QAAD,CAArB,CACA,GAAIK,CAAAA,YAAY,CAAGF,YAAY,EAAIH,QAAnC,CAEA,GAAII,SAAS,EAAI,IAAjB,CAAuB,CACrB,MAAO,KAAP,CACD,CAED,GAAIE,CAAAA,WAAJ,CACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAEE,GAAI,MAAOF,CAAAA,SAAP,GAAqB,UAArB,EAAmC,CAACZ,gBAAgB,CAACY,SAAD,CAAxD,CAAqE,CACnEE,WAAW,CAAG,kEAAd,CACD,CAED,GAAIA,WAAW,GAAKC,SAApB,CAA+B,CAC7B,MAAO,IAAIC,CAAAA,KAAJ,CAAU,WAAWC,MAAX,CAAkBP,QAAlB,CAA4B,IAA5B,EAAkCO,MAAlC,CAAyCJ,YAAzC,CAAuD,iBAAvD,EAA0EI,MAA1E,CAAiFR,aAAjF,CAAgG,KAAhG,EAAyG,iDAAiDQ,MAAjD,CAAwDH,WAAxD,CAAqE,GAArE,CAAzG,CAAqL,2EAA/L,CAAP,CACD,CAED,MAAO,KAAP,CACD,CAED,cAAef,CAAAA,cAAc,CAACD,SAAS,CAACG,WAAX,CAAwBK,uBAAxB,CAA7B","sourcesContent":["import * as PropTypes from 'prop-types';\nimport chainPropTypes from './chainPropTypes';\n\nfunction isClassComponent(elementType) {\n  // elementType.prototype?.isReactComponent\n  var _elementType$prototyp = elementType.prototype,\n      prototype = _elementType$prototyp === void 0 ? {} : _elementType$prototyp;\n  return Boolean(prototype.isReactComponent);\n}\n\nfunction elementTypeAcceptingRef(props, propName, componentName, location, propFullName) {\n  var propValue = props[propName];\n  var safePropName = propFullName || propName;\n\n  if (propValue == null) {\n    return null;\n  }\n\n  var warningHint;\n  /**\n   * Blacklisting instead of whitelisting\n   *\n   * Blacklisting will miss some components, such as React.Fragment. Those will at least\n   * trigger a warning in React.\n   * We can't whitelist because there is no safe way to detect React.forwardRef\n   * or class components. \"Safe\" means there's no public API.\n   *\n   */\n\n  if (typeof propValue === 'function' && !isClassComponent(propValue)) {\n    warningHint = 'Did you accidentally provide a plain function component instead?';\n  }\n\n  if (warningHint !== undefined) {\n    return new Error(\"Invalid \".concat(location, \" `\").concat(safePropName, \"` supplied to `\").concat(componentName, \"`. \") + \"Expected an element type that can hold a ref. \".concat(warningHint, \" \") + 'For more information see https://material-ui.com/r/caveat-with-refs-guide');\n  }\n\n  return null;\n}\n\nexport default chainPropTypes(PropTypes.elementType, elementTypeAcceptingRef);"]},"metadata":{},"sourceType":"module"}