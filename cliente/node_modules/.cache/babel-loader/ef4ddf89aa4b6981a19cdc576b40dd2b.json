{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\recse\\\\Desktop\\\\PORTFOLIOS\\\\descargador\\\\cliente\\\\src\\\\componentes\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport '../css/App.css';\nimport { PlayCircleFilled } from \"@material-ui/icons\";\nimport React, { useState } from \"react\"; // Backend url constant\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst backend_uri = \"http://localhost:5000\";\n\nasync function downloadRequest(url, downloadFormat) {\n  // Send download request to custom url\n  let customUrl = `${backend_uri}/download?url=${url}&format=${downloadFormat}`;\n  const res = await fetch(customUrl);\n\n  try {\n    if (res.status === 200) {\n      // Open custom url to initiate download\n      window.location.assign(customUrl);\n    }\n  } catch (e) {\n    console.error(e);\n  }\n}\n\n(function () {\n  // Variables\n  var $curve = document.getElementById(\"curve\");\n  var last_known_scroll_position = 0;\n  var defaultCurveValue = 350;\n  var curveRate = 3;\n  var ticking = false;\n  var curveValue; // Handle the functionality\n\n  function scrollEvent(scrollPos) {\n    if (scrollPos >= 0 && scrollPos < defaultCurveValue) {\n      curveValue = defaultCurveValue - parseFloat(scrollPos / curveRate);\n      $curve.setAttribute(\"d\", \"M 800 300 Q 400 \" + curveValue + \" 0 300 L 0 0 L 800 0 L 800 300 Z\");\n    }\n  } // Scroll Listener\n  // https://developer.mozilla.org/en-US/docs/Web/Events/scroll\n\n\n  window.addEventListener(\"scroll\", function (e) {\n    last_known_scroll_position = window.scrollY;\n\n    if (!ticking) {\n      window.requestAnimationFrame(function () {\n        scrollEvent(last_known_scroll_position);\n        ticking = false;\n      });\n    }\n\n    ticking = true;\n  });\n})();\n\nfunction App() {\n  _s();\n\n  // State\n  const [selectedDownloadOption, setSelectedDownloadOption] = useState(\"mp4\"); // Web page html\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      id: \"downloadBtn\",\n      onClick: () => downloadRequest(document.getElementById(\"url_input\").value, selectedDownloadOption),\n      children: /*#__PURE__*/_jsxDEV(PlayCircleFilled, {\n        className: \"playBtnIcon\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"url_input\",\n        autoComplete: \"off\",\n        placeholder: \"Paste video URL here\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      id: \"buttonRow\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: selectedDownloadOption === \"mp4\" ? \"selectedDownloadOption\" : \"downloadOption\",\n        onClick: () => {\n          setSelectedDownloadOption(\"mp4\");\n        },\n        children: \"mp4\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: selectedDownloadOption === \"mp3\" ? \"selectedDownloadOption\" : \"downloadOption\",\n        onClick: () => {\n          setSelectedDownloadOption(\"mp3\");\n        },\n        children: \"mp3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"CdViE9CPInn9gp0H1ApxxHDTZjM=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/recse/Desktop/PORTFOLIOS/descargador/cliente/src/componentes/App.js"],"names":["PlayCircleFilled","React","useState","backend_uri","downloadRequest","url","downloadFormat","customUrl","res","fetch","status","window","location","assign","e","console","error","$curve","document","getElementById","last_known_scroll_position","defaultCurveValue","curveRate","ticking","curveValue","scrollEvent","scrollPos","parseFloat","setAttribute","addEventListener","scrollY","requestAnimationFrame","App","selectedDownloadOption","setSelectedDownloadOption","value"],"mappings":"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","sourcesContent":["import '../css/App.css';\nimport { PlayCircleFilled } from \"@material-ui/icons\";\nimport React, { useState } from \"react\";\n\n// Backend url constant\nconst backend_uri = \"http://localhost:5000\"\n\nasync function downloadRequest(url, downloadFormat) {\n  // Send download request to custom url\n  let customUrl = `${backend_uri}/download?url=${url}&format=${downloadFormat}`;\n  const res = await fetch(customUrl);\n\n  try {\n    if (res.status === 200) {\n      // Open custom url to initiate download\n      window.location.assign(customUrl);\n    }\n  } catch (e) {\n    console.error(e);\n  }\n}\n\n(function() {\n  // Variables\n  var $curve = document.getElementById(\"curve\");\n  var last_known_scroll_position = 0;\n  var defaultCurveValue = 350;\n  var curveRate = 3;\n  var ticking = false;\n  var curveValue;\n\n  // Handle the functionality\n  function scrollEvent(scrollPos) {\n    if (scrollPos >= 0 && scrollPos < defaultCurveValue) {\n      curveValue = defaultCurveValue - parseFloat(scrollPos / curveRate);\n      $curve.setAttribute(\n        \"d\",\n        \"M 800 300 Q 400 \" + curveValue + \" 0 300 L 0 0 L 800 0 L 800 300 Z\"\n      );\n    }\n  }\n\n  // Scroll Listener\n  // https://developer.mozilla.org/en-US/docs/Web/Events/scroll\n  window.addEventListener(\"scroll\", function(e) {\n    last_known_scroll_position = window.scrollY;\n\n    if (!ticking) {\n      window.requestAnimationFrame(function() {\n        scrollEvent(last_known_scroll_position);\n        ticking = false;\n      });\n    }\n\n    ticking = true;\n  });\n})();\n\n\nfunction App() {\n  // State\n  const [selectedDownloadOption, setSelectedDownloadOption] = useState(\"mp4\");\n \n  // Web page html\n  return (\n\n    <div className=\"App\">\n        <button id=\"downloadBtn\" onClick={() => downloadRequest(document.getElementById(\"url_input\").value, selectedDownloadOption)}>\n          <PlayCircleFilled className=\"playBtnIcon\" />\n        </button>\n\n        <div className=\"row\">\n          <input type=\"text\" id=\"url_input\" autoComplete=\"off\" placeholder=\"Paste video URL here\"></input>\n        </div>\n\n        <div className=\"row\" id=\"buttonRow\">\n          <button \n            className={selectedDownloadOption === \"mp4\" ? \"selectedDownloadOption\" : \"downloadOption\"} \n            onClick={() => {setSelectedDownloadOption(\"mp4\")}}\n          >\n            mp4\n          </button>\n\n          <button \n            className={selectedDownloadOption === \"mp3\" ? \"selectedDownloadOption\" : \"downloadOption\"} \n            onClick={() => {setSelectedDownloadOption(\"mp3\")}}\n          >\n            mp3\n          </button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}