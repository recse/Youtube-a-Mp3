{"ast":null,"code":"import hyphenate from'hyphenate-style-name';/**\n * Convert camel cased property names to dash separated.\n *\n * @param {Object} style\n * @return {Object}\n */function convertCase(style){var converted={};for(var prop in style){var key=prop.indexOf('--')===0?prop:hyphenate(prop);converted[key]=style[prop];}if(style.fallbacks){if(Array.isArray(style.fallbacks))converted.fallbacks=style.fallbacks.map(convertCase);else converted.fallbacks=convertCase(style.fallbacks);}return converted;}/**\n * Allow camel cased property names by converting them back to dasherized.\n *\n * @param {Rule} rule\n */function camelCase(){function onProcessStyle(style){if(Array.isArray(style)){// Handle rules like @font-face, which can have multiple styles in an array\nfor(var index=0;index<style.length;index++){style[index]=convertCase(style[index]);}return style;}return convertCase(style);}function onChangeValue(value,prop,rule){if(prop.indexOf('--')===0){return value;}var hyphenatedProp=hyphenate(prop);// There was no camel case in place\nif(prop===hyphenatedProp)return value;rule.prop(hyphenatedProp,value);// Core will ignore that property value we set the proper one above.\nreturn null;}return{onProcessStyle:onProcessStyle,onChangeValue:onChangeValue};}export default camelCase;","map":{"version":3,"sources":["C:/Users/recse/Desktop/PORTFOLIOS/descargador/cliente/src/node_modules/jss-plugin-camel-case/dist/jss-plugin-camel-case.esm.js"],"names":["hyphenate","convertCase","style","converted","prop","key","indexOf","fallbacks","Array","isArray","map","camelCase","onProcessStyle","index","length","onChangeValue","value","rule","hyphenatedProp"],"mappings":"AAAA,MAAOA,CAAAA,SAAP,KAAsB,sBAAtB,CAEA;AACA;AACA;AACA;AACA;AACA,GAEA,QAASC,CAAAA,WAAT,CAAqBC,KAArB,CAA4B,CAC1B,GAAIC,CAAAA,SAAS,CAAG,EAAhB,CAEA,IAAK,GAAIC,CAAAA,IAAT,GAAiBF,CAAAA,KAAjB,CAAwB,CACtB,GAAIG,CAAAA,GAAG,CAAGD,IAAI,CAACE,OAAL,CAAa,IAAb,IAAuB,CAAvB,CAA2BF,IAA3B,CAAkCJ,SAAS,CAACI,IAAD,CAArD,CACAD,SAAS,CAACE,GAAD,CAAT,CAAiBH,KAAK,CAACE,IAAD,CAAtB,CACD,CAED,GAAIF,KAAK,CAACK,SAAV,CAAqB,CACnB,GAAIC,KAAK,CAACC,OAAN,CAAcP,KAAK,CAACK,SAApB,CAAJ,CAAoCJ,SAAS,CAACI,SAAV,CAAsBL,KAAK,CAACK,SAAN,CAAgBG,GAAhB,CAAoBT,WAApB,CAAtB,CAApC,IAAgGE,CAAAA,SAAS,CAACI,SAAV,CAAsBN,WAAW,CAACC,KAAK,CAACK,SAAP,CAAjC,CACjG,CAED,MAAOJ,CAAAA,SAAP,CACD,CACD;AACA;AACA;AACA;AACA,GAGA,QAASQ,CAAAA,SAAT,EAAqB,CACnB,QAASC,CAAAA,cAAT,CAAwBV,KAAxB,CAA+B,CAC7B,GAAIM,KAAK,CAACC,OAAN,CAAcP,KAAd,CAAJ,CAA0B,CACxB;AACA,IAAK,GAAIW,CAAAA,KAAK,CAAG,CAAjB,CAAoBA,KAAK,CAAGX,KAAK,CAACY,MAAlC,CAA0CD,KAAK,EAA/C,CAAmD,CACjDX,KAAK,CAACW,KAAD,CAAL,CAAeZ,WAAW,CAACC,KAAK,CAACW,KAAD,CAAN,CAA1B,CACD,CAED,MAAOX,CAAAA,KAAP,CACD,CAED,MAAOD,CAAAA,WAAW,CAACC,KAAD,CAAlB,CACD,CAED,QAASa,CAAAA,aAAT,CAAuBC,KAAvB,CAA8BZ,IAA9B,CAAoCa,IAApC,CAA0C,CACxC,GAAIb,IAAI,CAACE,OAAL,CAAa,IAAb,IAAuB,CAA3B,CAA8B,CAC5B,MAAOU,CAAAA,KAAP,CACD,CAED,GAAIE,CAAAA,cAAc,CAAGlB,SAAS,CAACI,IAAD,CAA9B,CAAsC;AAEtC,GAAIA,IAAI,GAAKc,cAAb,CAA6B,MAAOF,CAAAA,KAAP,CAC7BC,IAAI,CAACb,IAAL,CAAUc,cAAV,CAA0BF,KAA1B,EAAkC;AAElC,MAAO,KAAP,CACD,CAED,MAAO,CACLJ,cAAc,CAAEA,cADX,CAELG,aAAa,CAAEA,aAFV,CAAP,CAID,CAED,cAAeJ,CAAAA,SAAf","sourcesContent":["import hyphenate from 'hyphenate-style-name';\n\n/**\n * Convert camel cased property names to dash separated.\n *\n * @param {Object} style\n * @return {Object}\n */\n\nfunction convertCase(style) {\n  var converted = {};\n\n  for (var prop in style) {\n    var key = prop.indexOf('--') === 0 ? prop : hyphenate(prop);\n    converted[key] = style[prop];\n  }\n\n  if (style.fallbacks) {\n    if (Array.isArray(style.fallbacks)) converted.fallbacks = style.fallbacks.map(convertCase);else converted.fallbacks = convertCase(style.fallbacks);\n  }\n\n  return converted;\n}\n/**\n * Allow camel cased property names by converting them back to dasherized.\n *\n * @param {Rule} rule\n */\n\n\nfunction camelCase() {\n  function onProcessStyle(style) {\n    if (Array.isArray(style)) {\n      // Handle rules like @font-face, which can have multiple styles in an array\n      for (var index = 0; index < style.length; index++) {\n        style[index] = convertCase(style[index]);\n      }\n\n      return style;\n    }\n\n    return convertCase(style);\n  }\n\n  function onChangeValue(value, prop, rule) {\n    if (prop.indexOf('--') === 0) {\n      return value;\n    }\n\n    var hyphenatedProp = hyphenate(prop); // There was no camel case in place\n\n    if (prop === hyphenatedProp) return value;\n    rule.prop(hyphenatedProp, value); // Core will ignore that property value we set the proper one above.\n\n    return null;\n  }\n\n  return {\n    onProcessStyle: onProcessStyle,\n    onChangeValue: onChangeValue\n  };\n}\n\nexport default camelCase;\n"]},"metadata":{},"sourceType":"module"}