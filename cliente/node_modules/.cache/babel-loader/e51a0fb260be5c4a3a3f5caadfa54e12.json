{"ast":null,"code":"import warning from'tiny-warning';import{createRule}from'jss';var now=Date.now();var fnValuesNs=\"fnValues\"+now;var fnRuleNs=\"fnStyle\"+ ++now;var functionPlugin=function functionPlugin(){return{onCreateRule:function onCreateRule(name,decl,options){if(typeof decl!=='function')return null;var rule=createRule(name,{},options);rule[fnRuleNs]=decl;return rule;},onProcessStyle:function onProcessStyle(style,rule){// We need to extract function values from the declaration, so that we can keep core unaware of them.\n// We need to do that only once.\n// We don't need to extract functions on each style update, since this can happen only once.\n// We don't support function values inside of function rules.\nif(fnValuesNs in rule||fnRuleNs in rule)return style;var fnValues={};for(var prop in style){var value=style[prop];if(typeof value!=='function')continue;delete style[prop];fnValues[prop]=value;}// $FlowFixMe[prop-missing]\nrule[fnValuesNs]=fnValues;return style;},onUpdate:function onUpdate(data,rule,sheet,options){var styleRule=rule;// $FlowFixMe[prop-missing]\nvar fnRule=styleRule[fnRuleNs];// If we have a style function, the entire rule is dynamic and style object\n// will be returned from that function.\nif(fnRule){// Empty object will remove all currently defined props\n// in case function rule returns a falsy value.\nstyleRule.style=fnRule(data)||{};if(process.env.NODE_ENV==='development'){for(var prop in styleRule.style){if(typeof styleRule.style[prop]==='function'){process.env.NODE_ENV!==\"production\"?warning(false,'[JSS] Function values inside function rules are not supported.'):void 0;break;}}}}// $FlowFixMe[prop-missing]\nvar fnValues=styleRule[fnValuesNs];// If we have a fn values map, it is a rule with function values.\nif(fnValues){for(var _prop in fnValues){styleRule.prop(_prop,fnValues[_prop](data),options);}}}};};export default functionPlugin;","map":{"version":3,"sources":["C:/Users/recse/Desktop/PORTFOLIOS/descargador/cliente/src/node_modules/jss-plugin-rule-value-function/dist/jss-plugin-rule-value-function.esm.js"],"names":["warning","createRule","now","Date","fnValuesNs","fnRuleNs","functionPlugin","onCreateRule","name","decl","options","rule","onProcessStyle","style","fnValues","prop","value","onUpdate","data","sheet","styleRule","fnRule","process","env","NODE_ENV","_prop"],"mappings":"AAAA,MAAOA,CAAAA,OAAP,KAAoB,cAApB,CACA,OAASC,UAAT,KAA2B,KAA3B,CAEA,GAAIC,CAAAA,GAAG,CAAGC,IAAI,CAACD,GAAL,EAAV,CACA,GAAIE,CAAAA,UAAU,CAAG,WAAaF,GAA9B,CACA,GAAIG,CAAAA,QAAQ,CAAG,UAAY,GAAEH,GAA7B,CAEA,GAAII,CAAAA,cAAc,CAAG,QAASA,CAAAA,cAAT,EAA0B,CAC7C,MAAO,CACLC,YAAY,CAAE,QAASA,CAAAA,YAAT,CAAsBC,IAAtB,CAA4BC,IAA5B,CAAkCC,OAAlC,CAA2C,CACvD,GAAI,MAAOD,CAAAA,IAAP,GAAgB,UAApB,CAAgC,MAAO,KAAP,CAChC,GAAIE,CAAAA,IAAI,CAAGV,UAAU,CAACO,IAAD,CAAO,EAAP,CAAWE,OAAX,CAArB,CACAC,IAAI,CAACN,QAAD,CAAJ,CAAiBI,IAAjB,CACA,MAAOE,CAAAA,IAAP,CACD,CANI,CAOLC,cAAc,CAAE,QAASA,CAAAA,cAAT,CAAwBC,KAAxB,CAA+BF,IAA/B,CAAqC,CACnD;AACA;AACA;AACA;AACA,GAAIP,UAAU,GAAIO,CAAAA,IAAd,EAAsBN,QAAQ,GAAIM,CAAAA,IAAtC,CAA4C,MAAOE,CAAAA,KAAP,CAC5C,GAAIC,CAAAA,QAAQ,CAAG,EAAf,CAEA,IAAK,GAAIC,CAAAA,IAAT,GAAiBF,CAAAA,KAAjB,CAAwB,CACtB,GAAIG,CAAAA,KAAK,CAAGH,KAAK,CAACE,IAAD,CAAjB,CACA,GAAI,MAAOC,CAAAA,KAAP,GAAiB,UAArB,CAAiC,SACjC,MAAOH,CAAAA,KAAK,CAACE,IAAD,CAAZ,CACAD,QAAQ,CAACC,IAAD,CAAR,CAAiBC,KAAjB,CACD,CAAC;AAGFL,IAAI,CAACP,UAAD,CAAJ,CAAmBU,QAAnB,CACA,MAAOD,CAAAA,KAAP,CACD,CAzBI,CA0BLI,QAAQ,CAAE,QAASA,CAAAA,QAAT,CAAkBC,IAAlB,CAAwBP,IAAxB,CAA8BQ,KAA9B,CAAqCT,OAArC,CAA8C,CACtD,GAAIU,CAAAA,SAAS,CAAGT,IAAhB,CAAsB;AAEtB,GAAIU,CAAAA,MAAM,CAAGD,SAAS,CAACf,QAAD,CAAtB,CAAkC;AAClC;AAEA,GAAIgB,MAAJ,CAAY,CACV;AACA;AACAD,SAAS,CAACP,KAAV,CAAkBQ,MAAM,CAACH,IAAD,CAAN,EAAgB,EAAlC,CAEA,GAAII,OAAO,CAACC,GAAR,CAAYC,QAAZ,GAAyB,aAA7B,CAA4C,CAC1C,IAAK,GAAIT,CAAAA,IAAT,GAAiBK,CAAAA,SAAS,CAACP,KAA3B,CAAkC,CAChC,GAAI,MAAOO,CAAAA,SAAS,CAACP,KAAV,CAAgBE,IAAhB,CAAP,GAAiC,UAArC,CAAiD,CAC/CO,OAAO,CAACC,GAAR,CAAYC,QAAZ,GAAyB,YAAzB,CAAwCxB,OAAO,CAAC,KAAD,CAAQ,gEAAR,CAA/C,CAA2H,IAAK,EAAhI,CACA,MACD,CACF,CACF,CACF,CAAC;AAGF,GAAIc,CAAAA,QAAQ,CAAGM,SAAS,CAAChB,UAAD,CAAxB,CAAsC;AAEtC,GAAIU,QAAJ,CAAc,CACZ,IAAK,GAAIW,CAAAA,KAAT,GAAkBX,CAAAA,QAAlB,CAA4B,CAC1BM,SAAS,CAACL,IAAV,CAAeU,KAAf,CAAsBX,QAAQ,CAACW,KAAD,CAAR,CAAgBP,IAAhB,CAAtB,CAA6CR,OAA7C,EACD,CACF,CACF,CAvDI,CAAP,CAyDD,CA1DD,CA4DA,cAAeJ,CAAAA,cAAf","sourcesContent":["import warning from 'tiny-warning';\nimport { createRule } from 'jss';\n\nvar now = Date.now();\nvar fnValuesNs = \"fnValues\" + now;\nvar fnRuleNs = \"fnStyle\" + ++now;\n\nvar functionPlugin = function functionPlugin() {\n  return {\n    onCreateRule: function onCreateRule(name, decl, options) {\n      if (typeof decl !== 'function') return null;\n      var rule = createRule(name, {}, options);\n      rule[fnRuleNs] = decl;\n      return rule;\n    },\n    onProcessStyle: function onProcessStyle(style, rule) {\n      // We need to extract function values from the declaration, so that we can keep core unaware of them.\n      // We need to do that only once.\n      // We don't need to extract functions on each style update, since this can happen only once.\n      // We don't support function values inside of function rules.\n      if (fnValuesNs in rule || fnRuleNs in rule) return style;\n      var fnValues = {};\n\n      for (var prop in style) {\n        var value = style[prop];\n        if (typeof value !== 'function') continue;\n        delete style[prop];\n        fnValues[prop] = value;\n      } // $FlowFixMe[prop-missing]\n\n\n      rule[fnValuesNs] = fnValues;\n      return style;\n    },\n    onUpdate: function onUpdate(data, rule, sheet, options) {\n      var styleRule = rule; // $FlowFixMe[prop-missing]\n\n      var fnRule = styleRule[fnRuleNs]; // If we have a style function, the entire rule is dynamic and style object\n      // will be returned from that function.\n\n      if (fnRule) {\n        // Empty object will remove all currently defined props\n        // in case function rule returns a falsy value.\n        styleRule.style = fnRule(data) || {};\n\n        if (process.env.NODE_ENV === 'development') {\n          for (var prop in styleRule.style) {\n            if (typeof styleRule.style[prop] === 'function') {\n              process.env.NODE_ENV !== \"production\" ? warning(false, '[JSS] Function values inside function rules are not supported.') : void 0;\n              break;\n            }\n          }\n        }\n      } // $FlowFixMe[prop-missing]\n\n\n      var fnValues = styleRule[fnValuesNs]; // If we have a fn values map, it is a rule with function values.\n\n      if (fnValues) {\n        for (var _prop in fnValues) {\n          styleRule.prop(_prop, fnValues[_prop](data), options);\n        }\n      }\n    }\n  };\n};\n\nexport default functionPlugin;\n"]},"metadata":{},"sourceType":"module"}